/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package starnet;

import java.awt.Color;
import java.awt.Font;
import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.OrientationRequested;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author junnu
 */
public class StatementSearch extends javax.swing.JFrame {

    /**
     * Creates new form StatementSearch
     */
    Connection conn=null;
    String values[]=new String[15];
    public StatementSearch() {
        initComponents();
        jButton1.requestFocusInWindow();
        this.dateandtime();
        this.data();
        table.getTableHeader().setFont(new Font("SansSerif", Font.BOLD, 14));
    }
    
    public void dateandtime() {    
       DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd-MM-yyyy");  
       LocalDateTime now = LocalDateTime.now();
       date.setText(dtf.format(now));
    } 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        search = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        date = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(960, 510));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel1.setText("Search...");

        table.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Xerox", "Prints", "Photos", "Clrprints", "Laminations", "Idcards", "Fancy Items", "Other Credits", "Salaries", "Hakeem", "Other Debits", "Rent", "Phonepe", "Balance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(25);
        jScrollPane1.setViewportView(table);

        search.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        search.setText("  Enter Search ( Eg. Rent, Prints, 40000, 09-2020... )");
        search.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchFocusLost(evt);
            }
        });
        search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchMouseClicked(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton2.setText("Print");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        date.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    public void data(){
         try {
            // TODO add your handling code here:
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);
            conn=Database.connect();
            Statement statement = conn.createStatement();
            String sql="SELECT * FROM accounts ORDER BY date DESC";
            ResultSet rs = statement.executeQuery(sql);
            while(rs.next()){
                for(int i=0;i<values.length;i++){
                    if(rs.getString(i+1)==null){
                        values[i]="0";
                    }
                    else{
                        values[i]=rs.getString(i+1);
                    }
                }
                model.addRow(values);
            }
        } catch (SQLException ex) {
            Logger.getLogger(StatementSearch.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public boolean isNumeric(String str){
        return str != null && str.matches("[-+]?\\d*\\.?\\d+");
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);
            String values[]=new String[15];
            conn=Database.connect();
            Statement statement = conn.createStatement();
            String sea=search.getText();
            String[] col={
                "date",
                "xerox",
                "prints",
                "photos",
                "clrprints",
                "laminations",
                "idcards",
                "payments",
                "items",
                "others_cre",
                "sal",
                "hak",
                "other_deb",
                "rent",
                "phonepe",
                "balance"
            };
            
            if(sea.equals("")||sea.equals("  Enter Search ( Eg. Rent, Prints, 40000, 09-2020... )")){
                this.data();
            }else if(Arrays.asList(col).contains(sea.toLowerCase())){
                String sql="SELECT * FROM accounts WHERE "+sea+" is NOT NULL AND "+sea+"<>0 ORDER BY date DESC";
                ResultSet rs = statement.executeQuery(sql);
                while(rs.next()){
                    for(int i=0;i<values.length;i++){
                        if(rs.getString(i+1)==null){
                            values[i]="0";
                        }
                        else{
                            values[i]=rs.getString(i+1);
                        }
                    }
                model.addRow(values);
                }
            }
            else if(isNumeric(sea)){
                String sql="SELECT * FROM accounts WHERE '"+sea+"' IN(xerox,prints,photos,clrprints,"
                        + "laminations,idcards,payments,items,other_cre,sal,hak,other_deb,rent,balance) ORDER BY date DESC";
                ResultSet rs = statement.executeQuery(sql);
                if(!rs.next()){
                    JOptionPane.showMessageDialog(null,"No Data Available");
                    this.data();
                }
                else{
                    do{
                    for(int i=0;i<values.length;i++){
                        if(rs.getString(i+1)==null){
                            values[i]="0";
                        }
                        else{
                            values[i]=rs.getString(i+1);
                        }
                    }
                    model.addRow(values);
                }while(rs.next());
                }
            }else if(sea.contains("-")){
                String sql="SELECT * FROM accounts WHERE date LIKE '%"+sea+"%' ORDER BY date DESC";
                ResultSet rs = statement.executeQuery(sql);
                while(rs.next()){
                    for(int i=0;i<values.length;i++){
                        if(rs.getString(i+1)==null){
                            values[i]="0";
                        }
                        else{
                            values[i]=rs.getString(i+1);
                        }
                    }
                model.addRow(values);
                }
            }
            else{
                JOptionPane.showMessageDialog(null,"Invalid Search");
                this.data();
            }
        } catch (SQLException ex) {
            Logger.getLogger(StatementSearch.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            try {
                search.setText("  Enter Search ( Eg. Rent, Prints, 40000, 09-2020... )");
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(StatementSearch.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void searchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFocusGained
        // TODO add your handling code here:
        if(search.getText().trim().equals("Enter Search ( Eg. Rent, Prints, 40000, 09-2020... )")){
            search.setText("");
            search.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_searchFocusGained

    private void searchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFocusLost
        // TODO add your handling code here:
         if(search.getText().trim().equals("")){
            search.setText("  Enter Search ( Eg. Rent, Prints, 40000, 09-2020... )");
            search.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_searchFocusLost

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:
            PrintRequestAttributeSet set=new HashPrintRequestAttributeSet();
            set.add(OrientationRequested.LANDSCAPE);
            MessageFormat m= new MessageFormat("Starnet Records");
            MessageFormat f= new MessageFormat("{0}");
            table.print(JTable.PrintMode.FIT_WIDTH, m, f,false,set,false);
        } catch (PrinterException ex) {
            Logger.getLogger(StatementSearch.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_searchMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
       try{
            conn=Database.connect();
            String sql="DELETE FROM accounts";
            Statement st=conn.createStatement();
            st.executeUpdate(sql);
            this.data();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null,e.getMessage());
        }finally{
           try{
            conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(Stocks.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatementSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatementSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatementSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatementSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StatementSearch().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel date;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField search;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
